// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient       Patient?
  doctor        Doctor?
  receptionist  Receptionist?
}

enum Role {
  ADMIN
  DOCTOR
  RECEPTIONIST
  PATIENT
}

// Patient model
model Patient {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  phone       String?
  address     String?
  dateOfBirth DateTime?
  gender      String?
  bloodType   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments     Appointment[]
  medicalRecords   MedicalRecord[]
  prescriptions    Prescription[]
}

// Doctor model
model Doctor {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  specialty     String
  licenseNumber String   @unique
  phone         String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointments     Appointment[]
  medicalRecords   MedicalRecord[]
  prescriptions    Prescription[]
}

// Receptionist model
model Receptionist {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  phone     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Appointment model
model Appointment {
  id          String            @id @default(uuid())
  patientId   String
  patient     Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  doctorId    String
  doctor      Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  
  dateTime    DateTime
  duration    Int               // in minutes
  status      AppointmentStatus @default(SCHEDULED)
  reason      String?
  notes       String?
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}

// Medical Record model
model MedicalRecord {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  
  diagnosis   String
  symptoms    String?
  treatment   String?
  notes       String?
  visitDate   DateTime @default(now())
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Prescription model
model Prescription {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  
  medication  String
  dosage      String
  frequency   String
  duration    String
  instructions String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
